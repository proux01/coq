iff_Symmetric: Symmetric iff
iff_Reflexive: Reflexive iff
impl_Reflexive: Reflexive Basics.impl
eq_Symmetric: forall {A : Type}, Symmetric eq
eq_Reflexive: forall {A : Type}, Reflexive eq
Equivalence_Reflexive:
  forall {A : Type} {R : Relation_Definitions.relation A},
  Equivalence R -> Reflexive R
Equivalence_Symmetric:
  forall {A : Type} {R : Relation_Definitions.relation A},
  Equivalence R -> Symmetric R
PreOrder_Reflexive:
  forall {A : Type} {R : Relation_Definitions.relation A},
  PreOrder R -> Reflexive R
PER_Symmetric:
  forall {A : Type} {R : Relation_Definitions.relation A},
  PER R -> Symmetric R
neq_Symmetric: forall {A : Type}, Symmetric (fun x y : A => x <> y)
reflexive_eq_dom_reflexive:
  forall {A B : Type} {R' : Relation_Definitions.relation B},
  Reflexive R' -> Reflexive (eq ==> R')%signature
B.b: B.a
A.b: A.a
F.L: F.P 0
inr: forall {A B : Type}, B -> A + B
inl: forall {A B : Type}, A -> A + B
(use "About" for full details on the implicit arguments of inl and inr)
f: None = 0
partition_cons1:
  forall [A : Type] (f : A -> bool) (a : A) (l : list A) [l1 l2 : list A],
  partition f l = (l1, l2) ->
  f a = true -> partition f (a :: l) = (a :: l1, l2)
